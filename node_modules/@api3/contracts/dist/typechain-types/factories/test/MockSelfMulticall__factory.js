"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockSelfMulticall__factory = void 0;
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [
            {
                internalType: "uint256",
                name: "fieldAlways123",
                type: "uint256",
            },
            {
                internalType: "string",
                name: "fieldAlwaysFoo",
                type: "string",
            },
        ],
        name: "MyError",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "int256",
                name: "argPositive",
                type: "int256",
            },
            {
                internalType: "int256",
                name: "argNegative",
                type: "int256",
            },
        ],
        name: "alwaysRevertsWithCustomError",
        outputs: [],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "int256",
                name: "argPositive",
                type: "int256",
            },
            {
                internalType: "int256",
                name: "argNegative",
                type: "int256",
            },
        ],
        name: "alwaysRevertsWithNoData",
        outputs: [],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "int256",
                name: "argPositive",
                type: "int256",
            },
            {
                internalType: "int256",
                name: "argNegative",
                type: "int256",
            },
        ],
        name: "alwaysRevertsWithString",
        outputs: [],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [],
        name: "argumentHistory",
        outputs: [
            {
                internalType: "int256[]",
                name: "",
                type: "int256[]",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "int256",
                name: "argPositive",
                type: "int256",
            },
        ],
        name: "convertsPositiveArgumentToNegative",
        outputs: [
            {
                internalType: "int256",
                name: "",
                type: "int256",
            },
        ],
        stateMutability: "payable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes[]",
                name: "data",
                type: "bytes[]",
            },
        ],
        name: "multicall",
        outputs: [
            {
                internalType: "bytes[]",
                name: "returndata",
                type: "bytes[]",
            },
        ],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes[]",
                name: "data",
                type: "bytes[]",
            },
        ],
        name: "tryMulticall",
        outputs: [
            {
                internalType: "bool[]",
                name: "successes",
                type: "bool[]",
            },
            {
                internalType: "bytes[]",
                name: "returndata",
                type: "bytes[]",
            },
        ],
        stateMutability: "nonpayable",
        type: "function",
    },
];
const _bytecode = "0x6080604052348015600f57600080fd5b50610a408061001f6000396000f3fe6080604052600436106100705760003560e01c8063841e07551161004e578063841e0755146100ee5780638ef62b291461010f57806393ab31751461012f578063ac9650d81461015157600080fd5b8063437b91161461007557806349944972146100ac5780636301c389146100ce575b600080fd5b34801561008157600080fd5b5061009561009036600461073e565b61017e565b6040516100a3929190610848565b60405180910390f35b3480156100b857600080fd5b506100cc6100c73660046108a2565b6102e4565b005b3480156100da57600080fd5b506100cc6100e93660046108a2565b610380565b6101016100fc3660046108c4565b6103cf565b6040519081526020016100a3565b34801561011b57600080fd5b506100cc61012a3660046108a2565b610461565b34801561013b57600080fd5b5061014461051b565b6040516100a391906108dd565b34801561015d57600080fd5b5061017161016c36600461073e565b6105bd565b6040516100a39190610920565b606080828067ffffffffffffffff81111561019b5761019b61093a565b6040519080825280602002602001820160405280156101c4578160200160208202803683370190505b5092508067ffffffffffffffff8111156101e0576101e061093a565b60405190808252806020026020018201604052801561021357816020015b60608152602001906001900390816101fe5790505b50915060005b818110156102db573086868381811061023457610234610950565b90506020028101906102469190610966565b6040516102549291906109b4565b600060405180830381855af49150503d806000811461028f576040519150601f19603f3d011682016040523d82523d6000602084013e610294565b606091505b508583815181106102a7576102a7610950565b602002602001018584815181106102c0576102c0610950565b60209081029190910101919091529015159052600101610219565b50509250929050565b6000821380156102f45750600081125b6103385760405162461bcd60e51b815260206004820152601060248201526f125b9d985b1a5908185c99dd5b595b9d60821b60448201526064015b60405180910390fd5b60405162461bcd60e51b815260206004820152601460248201527f5265766572746564207769746820737472696e67000000000000000000000000604482015260640161032f565b6000821380156103905750600081125b6100705760405162461bcd60e51b815260206004820152601060248201526f125b9d985b1a5908185c99dd5b595b9d60821b604482015260640161032f565b60008082136104205760405162461bcd60e51b815260206004820152601560248201527f417267756d656e74206e6f7420706f7369746976650000000000000000000000604482015260640161032f565b600080546001810182559080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630182905561045b826109c4565b92915050565b6000821380156104715750600081125b6104b05760405162461bcd60e51b815260206004820152601060248201526f125b9d985b1a5908185c99dd5b595b9d60821b604482015260640161032f565b604080517f0b9344e2000000000000000000000000000000000000000000000000000000008152607b60048201526024810191909152600360448201527f466f6f0000000000000000000000000000000000000000000000000000000000606482015260840161032f565b600080546060919067ffffffffffffffff81111561053b5761053b61093a565b604051908082528060200260200182016040528015610564578160200160208202803683370190505b50905060005b6000548110156105b7576000818154811061058757610587610950565b90600052602060002001548282815181106105a4576105a4610950565b602090810291909101015260010161056a565b50919050565b6060818067ffffffffffffffff8111156105d9576105d961093a565b60405190808252806020026020018201604052801561060c57816020015b60608152602001906001900390816105f75790505b50915060005b818110156107365760003086868481811061062f5761062f610950565b90506020028101906106419190610966565b60405161064f9291906109b4565b600060405180830381855af49150503d806000811461068a576040519150601f19603f3d011682016040523d82523d6000602084013e61068f565b606091505b508584815181106106a2576106a2610950565b602090810291909101015290508061072d5760008483815181106106c8576106c8610950565b602002602001015190506000815111156106e55780518082602001fd5b60405162461bcd60e51b815260206004820152601b60248201527f4d756c746963616c6c3a204e6f2072657665727420737472696e670000000000604482015260640161032f565b50600101610612565b505092915050565b6000806020838503121561075157600080fd5b823567ffffffffffffffff81111561076857600080fd5b8301601f8101851361077957600080fd5b803567ffffffffffffffff81111561079057600080fd5b8560208260051b84010111156107a557600080fd5b6020919091019590945092505050565b600082825180855260208501945060208160051b8301016020850160005b8381101561083c57848303601f190188528151805180855260005b8181101561080a576020818401810151878301820152016107ee565b506000602082870101526020601f19601f830116860101945050506020820191506020880197506001810190506107d3565b50909695505050505050565b6040808252835190820181905260009060208501906060840190835b818110156108845783511515835260209384019390920191600101610864565b5050838103602085015261089881866107b5565b9695505050505050565b600080604083850312156108b557600080fd5b50508035926020909101359150565b6000602082840312156108d657600080fd5b5035919050565b602080825282518282018190526000918401906040840190835b818110156109155783518352602093840193909201916001016108f7565b509095945050505050565b60208152600061093360208301846107b5565b9392505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261097d57600080fd5b83018035915067ffffffffffffffff82111561099857600080fd5b6020019150368190038213156109ad57600080fd5b9250929050565b8183823760009101908152919050565b60007f80000000000000000000000000000000000000000000000000000000000000008203610a0357634e487b7160e01b600052601160045260246000fd5b506000039056fea26469706673582212206f2cd1db1b226e914e4699dc61fe1dbcb8c7fe1073878e1528cbcf58483716cb64736f6c634300081b0033";
const isSuperArgs = (xs) => xs.length > 1;
class MockSelfMulticall__factory extends ethers_1.ContractFactory {
    constructor(...args) {
        if (isSuperArgs(args)) {
            super(...args);
        }
        else {
            super(_abi, _bytecode, args[0]);
        }
    }
    getDeployTransaction(overrides) {
        return super.getDeployTransaction(overrides || {});
    }
    deploy(overrides) {
        return super.deploy(overrides || {});
    }
    connect(runner) {
        return super.connect(runner);
    }
    static bytecode = _bytecode;
    static abi = _abi;
    static createInterface() {
        return new ethers_1.Interface(_abi);
    }
    static connect(address, runner) {
        return new ethers_1.Contract(address, _abi, runner);
    }
}
exports.MockSelfMulticall__factory = MockSelfMulticall__factory;
//# sourceMappingURL=MockSelfMulticall__factory.js.map