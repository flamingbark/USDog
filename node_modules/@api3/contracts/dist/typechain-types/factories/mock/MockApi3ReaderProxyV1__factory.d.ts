import { ContractFactory, ContractTransactionResponse } from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { MockApi3ReaderProxyV1, MockApi3ReaderProxyV1Interface } from "../../mock/MockApi3ReaderProxyV1";
type MockApi3ReaderProxyV1ConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class MockApi3ReaderProxyV1__factory extends ContractFactory {
    constructor(...args: MockApi3ReaderProxyV1ConstructorParams);
    getDeployTransaction(overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<ContractDeployTransaction>;
    deploy(overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<MockApi3ReaderProxyV1 & {
        deploymentTransaction(): ContractTransactionResponse;
    }>;
    connect(runner: ContractRunner | null): MockApi3ReaderProxyV1__factory;
    static readonly bytecode = "0x6080604052348015600f57600080fd5b506104978061001f6000396000f3fe608060405234801561001057600080fd5b50600436106100d45760003560e01c80637284e41611610081578063b5ab58dc1161005b578063b5ab58dc146101bb578063b633620c146101bb578063feaf968c146101ce57600080fd5b80637284e4161461014f5780638205bf6a146101695780639a6fc8f51461017157600080fd5b806357de26a4116100b257806357de26a41461010b5780635b25966614610132578063668a0f021461014757600080fd5b8063313ce567146100d957806350d25bcd146100ed57806354fd4d5014610103575b600080fd5b604051601281526020015b60405180910390f35b6100f56101d6565b6040519081526020016100e4565b6113316100f5565b6101136101e9565b60408051601b9390930b835263ffffffff9091166020830152016100e4565b61014561014036600461037f565b61025a565b005b6100f5610306565b604080516020810182526000815290516100e491906103c7565b6100f5610321565b61018461017f366004610415565b610337565b6040805169ffffffffffffffffffff968716815260208101959095528401929092526060830152909116608082015260a0016100e4565b6100f56101c9366004610448565b610306565b610184610358565b60006101e06101e9565b50601b0b919050565b60008054601b81900b91600160e01b90910463ffffffff16908190036102565760405162461bcd60e51b815260206004820152601460248201527f446174612066656564206e6f74206d6f636b656400000000000000000000000060448201526064015b60405180910390fd5b9091565b8063ffffffff166000036102b05760405162461bcd60e51b815260206004820152600e60248201527f54696d657374616d70207a65726f000000000000000000000000000000000000604482015260640161024d565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff90911663ffffffff909116600160e01b027fffffffff000000000000000000000000000000000000000000000000000000001617600055565b6000604051631fc30cb960e01b815260040160405180910390fd5b600061032b6101e9565b63ffffffff1692915050565b6000806000806000604051631fc30cb960e01b815260040160405180910390fd5b6000808080806103666101e9565b9596601b9190910b9563ffffffff169450849350909150565b6000806040838503121561039257600080fd5b823580601b0b81146103a357600080fd5b9150602083013563ffffffff811681146103bc57600080fd5b809150509250929050565b602081526000825180602084015260005b818110156103f557602081860181015160408684010152016103d8565b506000604082850101526040601f19601f83011684010191505092915050565b60006020828403121561042757600080fd5b813569ffffffffffffffffffff8116811461044157600080fd5b9392505050565b60006020828403121561045a57600080fd5b503591905056fea26469706673582212208c38dd458b90f897bedf1c903d3cfec7333bf44c6f5e253904e419502b1233af64736f6c634300081b0033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "FunctionIsNotSupported";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "int256";
            readonly name: "current";
            readonly type: "int256";
        }, {
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "roundId";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "updatedAt";
            readonly type: "uint256";
        }];
        readonly name: "AnswerUpdated";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "roundId";
            readonly type: "uint256";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "startedBy";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "startedAt";
            readonly type: "uint256";
        }];
        readonly name: "NewRound";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "decimals";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "description";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly name: "getAnswer";
        readonly outputs: readonly [{
            readonly internalType: "int256";
            readonly name: "";
            readonly type: "int256";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint80";
            readonly name: "";
            readonly type: "uint80";
        }];
        readonly name: "getRoundData";
        readonly outputs: readonly [{
            readonly internalType: "uint80";
            readonly name: "";
            readonly type: "uint80";
        }, {
            readonly internalType: "int256";
            readonly name: "";
            readonly type: "int256";
        }, {
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint80";
            readonly name: "";
            readonly type: "uint80";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly name: "getTimestamp";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "latestAnswer";
        readonly outputs: readonly [{
            readonly internalType: "int256";
            readonly name: "value";
            readonly type: "int256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "latestRound";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "latestRoundData";
        readonly outputs: readonly [{
            readonly internalType: "uint80";
            readonly name: "roundId";
            readonly type: "uint80";
        }, {
            readonly internalType: "int256";
            readonly name: "answer";
            readonly type: "int256";
        }, {
            readonly internalType: "uint256";
            readonly name: "startedAt";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "updatedAt";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint80";
            readonly name: "answeredInRound";
            readonly type: "uint80";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "latestTimestamp";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "timestamp";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "int224";
            readonly name: "value";
            readonly type: "int224";
        }, {
            readonly internalType: "uint32";
            readonly name: "timestamp";
            readonly type: "uint32";
        }];
        readonly name: "mock";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "read";
        readonly outputs: readonly [{
            readonly internalType: "int224";
            readonly name: "value";
            readonly type: "int224";
        }, {
            readonly internalType: "uint32";
            readonly name: "timestamp";
            readonly type: "uint32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "version";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }];
    static createInterface(): MockApi3ReaderProxyV1Interface;
    static connect(address: string, runner?: ContractRunner | null): MockApi3ReaderProxyV1;
}
export {};
//# sourceMappingURL=MockApi3ReaderProxyV1__factory.d.ts.map