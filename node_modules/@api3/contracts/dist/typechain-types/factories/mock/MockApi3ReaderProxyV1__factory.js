"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockApi3ReaderProxyV1__factory = void 0;
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [],
        name: "FunctionIsNotSupported",
        type: "error",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "int256",
                name: "current",
                type: "int256",
            },
            {
                indexed: true,
                internalType: "uint256",
                name: "roundId",
                type: "uint256",
            },
            {
                indexed: false,
                internalType: "uint256",
                name: "updatedAt",
                type: "uint256",
            },
        ],
        name: "AnswerUpdated",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "uint256",
                name: "roundId",
                type: "uint256",
            },
            {
                indexed: true,
                internalType: "address",
                name: "startedBy",
                type: "address",
            },
            {
                indexed: false,
                internalType: "uint256",
                name: "startedAt",
                type: "uint256",
            },
        ],
        name: "NewRound",
        type: "event",
    },
    {
        inputs: [],
        name: "decimals",
        outputs: [
            {
                internalType: "uint8",
                name: "",
                type: "uint8",
            },
        ],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [],
        name: "description",
        outputs: [
            {
                internalType: "string",
                name: "",
                type: "string",
            },
        ],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        name: "getAnswer",
        outputs: [
            {
                internalType: "int256",
                name: "",
                type: "int256",
            },
        ],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint80",
                name: "",
                type: "uint80",
            },
        ],
        name: "getRoundData",
        outputs: [
            {
                internalType: "uint80",
                name: "",
                type: "uint80",
            },
            {
                internalType: "int256",
                name: "",
                type: "int256",
            },
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
            {
                internalType: "uint80",
                name: "",
                type: "uint80",
            },
        ],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        name: "getTimestamp",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [],
        name: "latestAnswer",
        outputs: [
            {
                internalType: "int256",
                name: "value",
                type: "int256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "latestRound",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [],
        name: "latestRoundData",
        outputs: [
            {
                internalType: "uint80",
                name: "roundId",
                type: "uint80",
            },
            {
                internalType: "int256",
                name: "answer",
                type: "int256",
            },
            {
                internalType: "uint256",
                name: "startedAt",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "updatedAt",
                type: "uint256",
            },
            {
                internalType: "uint80",
                name: "answeredInRound",
                type: "uint80",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "latestTimestamp",
        outputs: [
            {
                internalType: "uint256",
                name: "timestamp",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "int224",
                name: "value",
                type: "int224",
            },
            {
                internalType: "uint32",
                name: "timestamp",
                type: "uint32",
            },
        ],
        name: "mock",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [],
        name: "read",
        outputs: [
            {
                internalType: "int224",
                name: "value",
                type: "int224",
            },
            {
                internalType: "uint32",
                name: "timestamp",
                type: "uint32",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "version",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "pure",
        type: "function",
    },
];
const _bytecode = "0x6080604052348015600f57600080fd5b506104978061001f6000396000f3fe608060405234801561001057600080fd5b50600436106100d45760003560e01c80637284e41611610081578063b5ab58dc1161005b578063b5ab58dc146101bb578063b633620c146101bb578063feaf968c146101ce57600080fd5b80637284e4161461014f5780638205bf6a146101695780639a6fc8f51461017157600080fd5b806357de26a4116100b257806357de26a41461010b5780635b25966614610132578063668a0f021461014757600080fd5b8063313ce567146100d957806350d25bcd146100ed57806354fd4d5014610103575b600080fd5b604051601281526020015b60405180910390f35b6100f56101d6565b6040519081526020016100e4565b6113316100f5565b6101136101e9565b60408051601b9390930b835263ffffffff9091166020830152016100e4565b61014561014036600461037f565b61025a565b005b6100f5610306565b604080516020810182526000815290516100e491906103c7565b6100f5610321565b61018461017f366004610415565b610337565b6040805169ffffffffffffffffffff968716815260208101959095528401929092526060830152909116608082015260a0016100e4565b6100f56101c9366004610448565b610306565b610184610358565b60006101e06101e9565b50601b0b919050565b60008054601b81900b91600160e01b90910463ffffffff16908190036102565760405162461bcd60e51b815260206004820152601460248201527f446174612066656564206e6f74206d6f636b656400000000000000000000000060448201526064015b60405180910390fd5b9091565b8063ffffffff166000036102b05760405162461bcd60e51b815260206004820152600e60248201527f54696d657374616d70207a65726f000000000000000000000000000000000000604482015260640161024d565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff90911663ffffffff909116600160e01b027fffffffff000000000000000000000000000000000000000000000000000000001617600055565b6000604051631fc30cb960e01b815260040160405180910390fd5b600061032b6101e9565b63ffffffff1692915050565b6000806000806000604051631fc30cb960e01b815260040160405180910390fd5b6000808080806103666101e9565b9596601b9190910b9563ffffffff169450849350909150565b6000806040838503121561039257600080fd5b823580601b0b81146103a357600080fd5b9150602083013563ffffffff811681146103bc57600080fd5b809150509250929050565b602081526000825180602084015260005b818110156103f557602081860181015160408684010152016103d8565b506000604082850101526040601f19601f83011684010191505092915050565b60006020828403121561042757600080fd5b813569ffffffffffffffffffff8116811461044157600080fd5b9392505050565b60006020828403121561045a57600080fd5b503591905056fea26469706673582212208c38dd458b90f897bedf1c903d3cfec7333bf44c6f5e253904e419502b1233af64736f6c634300081b0033";
const isSuperArgs = (xs) => xs.length > 1;
class MockApi3ReaderProxyV1__factory extends ethers_1.ContractFactory {
    constructor(...args) {
        if (isSuperArgs(args)) {
            super(...args);
        }
        else {
            super(_abi, _bytecode, args[0]);
        }
    }
    getDeployTransaction(overrides) {
        return super.getDeployTransaction(overrides || {});
    }
    deploy(overrides) {
        return super.deploy(overrides || {});
    }
    connect(runner) {
        return super.connect(runner);
    }
    static bytecode = _bytecode;
    static abi = _abi;
    static createInterface() {
        return new ethers_1.Interface(_abi);
    }
    static connect(address, runner) {
        return new ethers_1.Contract(address, _abi, runner);
    }
}
exports.MockApi3ReaderProxyV1__factory = MockApi3ReaderProxyV1__factory;
//# sourceMappingURL=MockApi3ReaderProxyV1__factory.js.map