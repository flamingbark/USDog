import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers";
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../common";
export interface Api3ServerV1OevExtensionInterface extends Interface {
    getFunction(nameOrSignature: "AUCTIONEER_ROLE_DESCRIPTION" | "WITHDRAWER_ROLE_DESCRIPTION" | "accessControlRegistry" | "adminRole" | "adminRoleDescription" | "api3ServerV1" | "auctioneerRole" | "containsBytecode" | "dappIdToLastPaidBid" | "getBalance" | "getBlockBasefee" | "getBlockNumber" | "getBlockTimestamp" | "getChainId" | "manager" | "multicall" | "oevDataFeed" | "payOevBid" | "simulateDappOevDataFeedUpdate" | "simulateExternalCall" | "tryMulticall" | "updateBeaconSetWithBeacons" | "updateDappOevDataFeed" | "withdraw" | "withdrawerRole"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "PaidOevBid" | "UpdatedBeaconSetWithBeacons" | "UpdatedBeaconWithSignedData" | "UpdatedDappOevDataFeed" | "Withdrew"): EventFragment;
    encodeFunctionData(functionFragment: "AUCTIONEER_ROLE_DESCRIPTION", values?: undefined): string;
    encodeFunctionData(functionFragment: "WITHDRAWER_ROLE_DESCRIPTION", values?: undefined): string;
    encodeFunctionData(functionFragment: "accessControlRegistry", values?: undefined): string;
    encodeFunctionData(functionFragment: "adminRole", values?: undefined): string;
    encodeFunctionData(functionFragment: "adminRoleDescription", values?: undefined): string;
    encodeFunctionData(functionFragment: "api3ServerV1", values?: undefined): string;
    encodeFunctionData(functionFragment: "auctioneerRole", values?: undefined): string;
    encodeFunctionData(functionFragment: "containsBytecode", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "dappIdToLastPaidBid", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getBalance", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "getBlockBasefee", values?: undefined): string;
    encodeFunctionData(functionFragment: "getBlockNumber", values?: undefined): string;
    encodeFunctionData(functionFragment: "getBlockTimestamp", values?: undefined): string;
    encodeFunctionData(functionFragment: "getChainId", values?: undefined): string;
    encodeFunctionData(functionFragment: "manager", values?: undefined): string;
    encodeFunctionData(functionFragment: "multicall", values: [BytesLike[]]): string;
    encodeFunctionData(functionFragment: "oevDataFeed", values: [BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "payOevBid", values: [BigNumberish, BigNumberish, BigNumberish, BytesLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "simulateDappOevDataFeedUpdate", values: [BigNumberish, BytesLike[]]): string;
    encodeFunctionData(functionFragment: "simulateExternalCall", values: [AddressLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "tryMulticall", values: [BytesLike[]]): string;
    encodeFunctionData(functionFragment: "updateBeaconSetWithBeacons", values: [BytesLike[]]): string;
    encodeFunctionData(functionFragment: "updateDappOevDataFeed", values: [BigNumberish, BytesLike[]]): string;
    encodeFunctionData(functionFragment: "withdraw", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "withdrawerRole", values?: undefined): string;
    decodeFunctionResult(functionFragment: "AUCTIONEER_ROLE_DESCRIPTION", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "WITHDRAWER_ROLE_DESCRIPTION", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "accessControlRegistry", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "adminRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "adminRoleDescription", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "api3ServerV1", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "auctioneerRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "containsBytecode", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "dappIdToLastPaidBid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getBlockBasefee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getBlockNumber", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getBlockTimestamp", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getChainId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "manager", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "oevDataFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "payOevBid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "simulateDappOevDataFeedUpdate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "simulateExternalCall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "tryMulticall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateBeaconSetWithBeacons", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateDappOevDataFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawerRole", data: BytesLike): Result;
}
export declare namespace PaidOevBidEvent {
    type InputTuple = [
        dappId: BigNumberish,
        updater: AddressLike,
        bidAmount: BigNumberish,
        signedDataTimestampCutoff: BigNumberish,
        auctioneer: AddressLike
    ];
    type OutputTuple = [
        dappId: bigint,
        updater: string,
        bidAmount: bigint,
        signedDataTimestampCutoff: bigint,
        auctioneer: string
    ];
    interface OutputObject {
        dappId: bigint;
        updater: string;
        bidAmount: bigint;
        signedDataTimestampCutoff: bigint;
        auctioneer: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace UpdatedBeaconSetWithBeaconsEvent {
    type InputTuple = [
        beaconSetId: BytesLike,
        value: BigNumberish,
        timestamp: BigNumberish
    ];
    type OutputTuple = [
        beaconSetId: string,
        value: bigint,
        timestamp: bigint
    ];
    interface OutputObject {
        beaconSetId: string;
        value: bigint;
        timestamp: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace UpdatedBeaconWithSignedDataEvent {
    type InputTuple = [
        beaconId: BytesLike,
        value: BigNumberish,
        timestamp: BigNumberish
    ];
    type OutputTuple = [
        beaconId: string,
        value: bigint,
        timestamp: bigint
    ];
    interface OutputObject {
        beaconId: string;
        value: bigint;
        timestamp: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace UpdatedDappOevDataFeedEvent {
    type InputTuple = [
        dappId: BigNumberish,
        updater: AddressLike,
        dataFeedId: BytesLike,
        updatedValue: BigNumberish,
        updatedTimestamp: BigNumberish
    ];
    type OutputTuple = [
        dappId: bigint,
        updater: string,
        dataFeedId: string,
        updatedValue: bigint,
        updatedTimestamp: bigint
    ];
    interface OutputObject {
        dappId: bigint;
        updater: string;
        dataFeedId: string;
        updatedValue: bigint;
        updatedTimestamp: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace WithdrewEvent {
    type InputTuple = [
        recipient: AddressLike,
        amount: BigNumberish,
        sender: AddressLike
    ];
    type OutputTuple = [recipient: string, amount: bigint, sender: string];
    interface OutputObject {
        recipient: string;
        amount: bigint;
        sender: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export interface Api3ServerV1OevExtension extends BaseContract {
    connect(runner?: ContractRunner | null): Api3ServerV1OevExtension;
    waitForDeployment(): Promise<this>;
    interface: Api3ServerV1OevExtensionInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    AUCTIONEER_ROLE_DESCRIPTION: TypedContractMethod<[], [string], "view">;
    WITHDRAWER_ROLE_DESCRIPTION: TypedContractMethod<[], [string], "view">;
    accessControlRegistry: TypedContractMethod<[], [string], "view">;
    adminRole: TypedContractMethod<[], [string], "view">;
    adminRoleDescription: TypedContractMethod<[], [string], "view">;
    api3ServerV1: TypedContractMethod<[], [string], "view">;
    auctioneerRole: TypedContractMethod<[], [string], "view">;
    containsBytecode: TypedContractMethod<[
        account: AddressLike
    ], [
        boolean
    ], "view">;
    dappIdToLastPaidBid: TypedContractMethod<[
        arg0: BigNumberish
    ], [
        [string, bigint] & {
            updater: string;
            signedDataTimestampCutoff: bigint;
        }
    ], "view">;
    getBalance: TypedContractMethod<[account: AddressLike], [bigint], "view">;
    getBlockBasefee: TypedContractMethod<[], [bigint], "view">;
    getBlockNumber: TypedContractMethod<[], [bigint], "view">;
    getBlockTimestamp: TypedContractMethod<[], [bigint], "view">;
    getChainId: TypedContractMethod<[], [bigint], "view">;
    manager: TypedContractMethod<[], [string], "view">;
    multicall: TypedContractMethod<[data: BytesLike[]], [string[]], "nonpayable">;
    oevDataFeed: TypedContractMethod<[
        dappId: BigNumberish,
        dataFeedId: BytesLike
    ], [
        [bigint, bigint] & {
            value: bigint;
            timestamp: bigint;
        }
    ], "view">;
    payOevBid: TypedContractMethod<[
        dappId: BigNumberish,
        bidAmount: BigNumberish,
        signedDataTimestampCutoff: BigNumberish,
        signature: BytesLike,
        data: BytesLike
    ], [
        void
    ], "nonpayable">;
    simulateDappOevDataFeedUpdate: TypedContractMethod<[
        dappId: BigNumberish,
        signedData: BytesLike[]
    ], [
        [
            string,
            bigint,
            bigint
        ] & {
            baseDataFeedId: string;
            updatedValue: bigint;
            updatedTimestamp: bigint;
        }
    ], "nonpayable">;
    simulateExternalCall: TypedContractMethod<[
        target: AddressLike,
        data: BytesLike
    ], [
        string
    ], "nonpayable">;
    tryMulticall: TypedContractMethod<[
        data: BytesLike[]
    ], [
        [boolean[], string[]] & {
            successes: boolean[];
            returndata: string[];
        }
    ], "nonpayable">;
    updateBeaconSetWithBeacons: TypedContractMethod<[
        beaconIds: BytesLike[]
    ], [
        string
    ], "nonpayable">;
    updateDappOevDataFeed: TypedContractMethod<[
        dappId: BigNumberish,
        signedData: BytesLike[]
    ], [
        [
            string,
            bigint,
            bigint
        ] & {
            baseDataFeedId: string;
            updatedValue: bigint;
            updatedTimestamp: bigint;
        }
    ], "nonpayable">;
    withdraw: TypedContractMethod<[
        recipient: AddressLike,
        amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    withdrawerRole: TypedContractMethod<[], [string], "view">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "AUCTIONEER_ROLE_DESCRIPTION"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "WITHDRAWER_ROLE_DESCRIPTION"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "accessControlRegistry"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "adminRole"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "adminRoleDescription"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "api3ServerV1"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "auctioneerRole"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "containsBytecode"): TypedContractMethod<[account: AddressLike], [boolean], "view">;
    getFunction(nameOrSignature: "dappIdToLastPaidBid"): TypedContractMethod<[
        arg0: BigNumberish
    ], [
        [string, bigint] & {
            updater: string;
            signedDataTimestampCutoff: bigint;
        }
    ], "view">;
    getFunction(nameOrSignature: "getBalance"): TypedContractMethod<[account: AddressLike], [bigint], "view">;
    getFunction(nameOrSignature: "getBlockBasefee"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "getBlockNumber"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "getBlockTimestamp"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "getChainId"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "manager"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "multicall"): TypedContractMethod<[data: BytesLike[]], [string[]], "nonpayable">;
    getFunction(nameOrSignature: "oevDataFeed"): TypedContractMethod<[
        dappId: BigNumberish,
        dataFeedId: BytesLike
    ], [
        [bigint, bigint] & {
            value: bigint;
            timestamp: bigint;
        }
    ], "view">;
    getFunction(nameOrSignature: "payOevBid"): TypedContractMethod<[
        dappId: BigNumberish,
        bidAmount: BigNumberish,
        signedDataTimestampCutoff: BigNumberish,
        signature: BytesLike,
        data: BytesLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "simulateDappOevDataFeedUpdate"): TypedContractMethod<[
        dappId: BigNumberish,
        signedData: BytesLike[]
    ], [
        [
            string,
            bigint,
            bigint
        ] & {
            baseDataFeedId: string;
            updatedValue: bigint;
            updatedTimestamp: bigint;
        }
    ], "nonpayable">;
    getFunction(nameOrSignature: "simulateExternalCall"): TypedContractMethod<[
        target: AddressLike,
        data: BytesLike
    ], [
        string
    ], "nonpayable">;
    getFunction(nameOrSignature: "tryMulticall"): TypedContractMethod<[
        data: BytesLike[]
    ], [
        [boolean[], string[]] & {
            successes: boolean[];
            returndata: string[];
        }
    ], "nonpayable">;
    getFunction(nameOrSignature: "updateBeaconSetWithBeacons"): TypedContractMethod<[beaconIds: BytesLike[]], [string], "nonpayable">;
    getFunction(nameOrSignature: "updateDappOevDataFeed"): TypedContractMethod<[
        dappId: BigNumberish,
        signedData: BytesLike[]
    ], [
        [
            string,
            bigint,
            bigint
        ] & {
            baseDataFeedId: string;
            updatedValue: bigint;
            updatedTimestamp: bigint;
        }
    ], "nonpayable">;
    getFunction(nameOrSignature: "withdraw"): TypedContractMethod<[
        recipient: AddressLike,
        amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "withdrawerRole"): TypedContractMethod<[], [string], "view">;
    getEvent(key: "PaidOevBid"): TypedContractEvent<PaidOevBidEvent.InputTuple, PaidOevBidEvent.OutputTuple, PaidOevBidEvent.OutputObject>;
    getEvent(key: "UpdatedBeaconSetWithBeacons"): TypedContractEvent<UpdatedBeaconSetWithBeaconsEvent.InputTuple, UpdatedBeaconSetWithBeaconsEvent.OutputTuple, UpdatedBeaconSetWithBeaconsEvent.OutputObject>;
    getEvent(key: "UpdatedBeaconWithSignedData"): TypedContractEvent<UpdatedBeaconWithSignedDataEvent.InputTuple, UpdatedBeaconWithSignedDataEvent.OutputTuple, UpdatedBeaconWithSignedDataEvent.OutputObject>;
    getEvent(key: "UpdatedDappOevDataFeed"): TypedContractEvent<UpdatedDappOevDataFeedEvent.InputTuple, UpdatedDappOevDataFeedEvent.OutputTuple, UpdatedDappOevDataFeedEvent.OutputObject>;
    getEvent(key: "Withdrew"): TypedContractEvent<WithdrewEvent.InputTuple, WithdrewEvent.OutputTuple, WithdrewEvent.OutputObject>;
    filters: {
        "PaidOevBid(uint256,address,uint256,uint256,address)": TypedContractEvent<PaidOevBidEvent.InputTuple, PaidOevBidEvent.OutputTuple, PaidOevBidEvent.OutputObject>;
        PaidOevBid: TypedContractEvent<PaidOevBidEvent.InputTuple, PaidOevBidEvent.OutputTuple, PaidOevBidEvent.OutputObject>;
        "UpdatedBeaconSetWithBeacons(bytes32,int224,uint32)": TypedContractEvent<UpdatedBeaconSetWithBeaconsEvent.InputTuple, UpdatedBeaconSetWithBeaconsEvent.OutputTuple, UpdatedBeaconSetWithBeaconsEvent.OutputObject>;
        UpdatedBeaconSetWithBeacons: TypedContractEvent<UpdatedBeaconSetWithBeaconsEvent.InputTuple, UpdatedBeaconSetWithBeaconsEvent.OutputTuple, UpdatedBeaconSetWithBeaconsEvent.OutputObject>;
        "UpdatedBeaconWithSignedData(bytes32,int224,uint32)": TypedContractEvent<UpdatedBeaconWithSignedDataEvent.InputTuple, UpdatedBeaconWithSignedDataEvent.OutputTuple, UpdatedBeaconWithSignedDataEvent.OutputObject>;
        UpdatedBeaconWithSignedData: TypedContractEvent<UpdatedBeaconWithSignedDataEvent.InputTuple, UpdatedBeaconWithSignedDataEvent.OutputTuple, UpdatedBeaconWithSignedDataEvent.OutputObject>;
        "UpdatedDappOevDataFeed(uint256,address,bytes32,int224,uint32)": TypedContractEvent<UpdatedDappOevDataFeedEvent.InputTuple, UpdatedDappOevDataFeedEvent.OutputTuple, UpdatedDappOevDataFeedEvent.OutputObject>;
        UpdatedDappOevDataFeed: TypedContractEvent<UpdatedDappOevDataFeedEvent.InputTuple, UpdatedDappOevDataFeedEvent.OutputTuple, UpdatedDappOevDataFeedEvent.OutputObject>;
        "Withdrew(address,uint256,address)": TypedContractEvent<WithdrewEvent.InputTuple, WithdrewEvent.OutputTuple, WithdrewEvent.OutputObject>;
        Withdrew: TypedContractEvent<WithdrewEvent.InputTuple, WithdrewEvent.OutputTuple, WithdrewEvent.OutputObject>;
    };
}
//# sourceMappingURL=Api3ServerV1OevExtension.d.ts.map