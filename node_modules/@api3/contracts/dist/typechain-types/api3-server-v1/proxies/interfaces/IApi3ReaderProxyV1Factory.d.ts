import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers";
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../../../common";
export interface IApi3ReaderProxyV1FactoryInterface extends Interface {
    getFunction(nameOrSignature: "api3ServerV1OevExtension" | "computeApi3ReaderProxyV1Address" | "deployApi3ReaderProxyV1"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "DeployedApi3ReaderProxyV1"): EventFragment;
    encodeFunctionData(functionFragment: "api3ServerV1OevExtension", values?: undefined): string;
    encodeFunctionData(functionFragment: "computeApi3ReaderProxyV1Address", values: [BytesLike, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "deployApi3ReaderProxyV1", values: [BytesLike, BigNumberish, BytesLike]): string;
    decodeFunctionResult(functionFragment: "api3ServerV1OevExtension", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "computeApi3ReaderProxyV1Address", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deployApi3ReaderProxyV1", data: BytesLike): Result;
}
export declare namespace DeployedApi3ReaderProxyV1Event {
    type InputTuple = [
        proxy: AddressLike,
        dapiName: BytesLike,
        dappId: BigNumberish,
        metadata: BytesLike
    ];
    type OutputTuple = [
        proxy: string,
        dapiName: string,
        dappId: bigint,
        metadata: string
    ];
    interface OutputObject {
        proxy: string;
        dapiName: string;
        dappId: bigint;
        metadata: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export interface IApi3ReaderProxyV1Factory extends BaseContract {
    connect(runner?: ContractRunner | null): IApi3ReaderProxyV1Factory;
    waitForDeployment(): Promise<this>;
    interface: IApi3ReaderProxyV1FactoryInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    api3ServerV1OevExtension: TypedContractMethod<[], [string], "nonpayable">;
    computeApi3ReaderProxyV1Address: TypedContractMethod<[
        dapiName: BytesLike,
        dappId: BigNumberish,
        metadata: BytesLike
    ], [
        string
    ], "view">;
    deployApi3ReaderProxyV1: TypedContractMethod<[
        dapiName: BytesLike,
        dappId: BigNumberish,
        metadata: BytesLike
    ], [
        string
    ], "nonpayable">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "api3ServerV1OevExtension"): TypedContractMethod<[], [string], "nonpayable">;
    getFunction(nameOrSignature: "computeApi3ReaderProxyV1Address"): TypedContractMethod<[
        dapiName: BytesLike,
        dappId: BigNumberish,
        metadata: BytesLike
    ], [
        string
    ], "view">;
    getFunction(nameOrSignature: "deployApi3ReaderProxyV1"): TypedContractMethod<[
        dapiName: BytesLike,
        dappId: BigNumberish,
        metadata: BytesLike
    ], [
        string
    ], "nonpayable">;
    getEvent(key: "DeployedApi3ReaderProxyV1"): TypedContractEvent<DeployedApi3ReaderProxyV1Event.InputTuple, DeployedApi3ReaderProxyV1Event.OutputTuple, DeployedApi3ReaderProxyV1Event.OutputObject>;
    filters: {
        "DeployedApi3ReaderProxyV1(address,bytes32,uint256,bytes)": TypedContractEvent<DeployedApi3ReaderProxyV1Event.InputTuple, DeployedApi3ReaderProxyV1Event.OutputTuple, DeployedApi3ReaderProxyV1Event.OutputObject>;
        DeployedApi3ReaderProxyV1: TypedContractEvent<DeployedApi3ReaderProxyV1Event.InputTuple, DeployedApi3ReaderProxyV1Event.OutputTuple, DeployedApi3ReaderProxyV1Event.OutputObject>;
    };
}
//# sourceMappingURL=IApi3ReaderProxyV1Factory.d.ts.map