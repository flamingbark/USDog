import type { BaseContract, BytesLike, FunctionFragment, Result, Interface, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers";
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedListener, TypedContractMethod } from "../../../common";
export interface IApi3ReaderProxyV1Interface extends Interface {
    getFunction(nameOrSignature: "api3ServerV1" | "api3ServerV1OevExtension" | "dapiName" | "dappId" | "initialize" | "read"): FunctionFragment;
    encodeFunctionData(functionFragment: "api3ServerV1", values?: undefined): string;
    encodeFunctionData(functionFragment: "api3ServerV1OevExtension", values?: undefined): string;
    encodeFunctionData(functionFragment: "dapiName", values?: undefined): string;
    encodeFunctionData(functionFragment: "dappId", values?: undefined): string;
    encodeFunctionData(functionFragment: "initialize", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "read", values?: undefined): string;
    decodeFunctionResult(functionFragment: "api3ServerV1", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "api3ServerV1OevExtension", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "dapiName", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "dappId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "read", data: BytesLike): Result;
}
export interface IApi3ReaderProxyV1 extends BaseContract {
    connect(runner?: ContractRunner | null): IApi3ReaderProxyV1;
    waitForDeployment(): Promise<this>;
    interface: IApi3ReaderProxyV1Interface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    api3ServerV1: TypedContractMethod<[], [string], "nonpayable">;
    api3ServerV1OevExtension: TypedContractMethod<[], [string], "nonpayable">;
    dapiName: TypedContractMethod<[], [string], "nonpayable">;
    dappId: TypedContractMethod<[], [bigint], "nonpayable">;
    initialize: TypedContractMethod<[
        initialOwner: AddressLike
    ], [
        void
    ], "nonpayable">;
    read: TypedContractMethod<[
    ], [
        [bigint, bigint] & {
            value: bigint;
            timestamp: bigint;
        }
    ], "view">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "api3ServerV1"): TypedContractMethod<[], [string], "nonpayable">;
    getFunction(nameOrSignature: "api3ServerV1OevExtension"): TypedContractMethod<[], [string], "nonpayable">;
    getFunction(nameOrSignature: "dapiName"): TypedContractMethod<[], [string], "nonpayable">;
    getFunction(nameOrSignature: "dappId"): TypedContractMethod<[], [bigint], "nonpayable">;
    getFunction(nameOrSignature: "initialize"): TypedContractMethod<[initialOwner: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "read"): TypedContractMethod<[
    ], [
        [bigint, bigint] & {
            value: bigint;
            timestamp: bigint;
        }
    ], "view">;
    filters: {};
}
//# sourceMappingURL=IApi3ReaderProxyV1.d.ts.map