import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, ContractRunner, ContractMethod, Listener } from "ethers";
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedListener, TypedContractMethod } from "../common";
export interface MockSafeTargetInterface extends Interface {
    getFunction(nameOrSignature: "forwarder" | "number" | "safe" | "setNumberAsForwarder" | "setNumberAsSafe"): FunctionFragment;
    encodeFunctionData(functionFragment: "forwarder", values?: undefined): string;
    encodeFunctionData(functionFragment: "number", values?: undefined): string;
    encodeFunctionData(functionFragment: "safe", values?: undefined): string;
    encodeFunctionData(functionFragment: "setNumberAsForwarder", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setNumberAsSafe", values: [BigNumberish]): string;
    decodeFunctionResult(functionFragment: "forwarder", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "number", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "safe", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setNumberAsForwarder", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setNumberAsSafe", data: BytesLike): Result;
}
export interface MockSafeTarget extends BaseContract {
    connect(runner?: ContractRunner | null): MockSafeTarget;
    waitForDeployment(): Promise<this>;
    interface: MockSafeTargetInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    forwarder: TypedContractMethod<[], [string], "view">;
    number: TypedContractMethod<[], [bigint], "view">;
    safe: TypedContractMethod<[], [string], "view">;
    setNumberAsForwarder: TypedContractMethod<[
        _number: BigNumberish
    ], [
        void
    ], "payable">;
    setNumberAsSafe: TypedContractMethod<[
        _number: BigNumberish
    ], [
        void
    ], "payable">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "forwarder"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "number"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "safe"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "setNumberAsForwarder"): TypedContractMethod<[_number: BigNumberish], [void], "payable">;
    getFunction(nameOrSignature: "setNumberAsSafe"): TypedContractMethod<[_number: BigNumberish], [void], "payable">;
    filters: {};
}
//# sourceMappingURL=MockSafeTarget.d.ts.map