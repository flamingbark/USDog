import { z } from 'zod';
export declare const chainExplorerAPIKeySchema: z.ZodObject<{
    required: z.ZodBoolean;
    hardhatEtherscanAlias: z.ZodOptional<z.ZodString>;
}, z.core.$strip>;
export declare const chainExplorerAPISchema: z.ZodObject<{
    key: z.ZodObject<{
        required: z.ZodBoolean;
        hardhatEtherscanAlias: z.ZodOptional<z.ZodString>;
    }, z.core.$strip>;
    url: z.ZodURL;
}, z.core.$strip>;
export declare const chainExplorerSchema: z.ZodObject<{
    api: z.ZodOptional<z.ZodObject<{
        key: z.ZodObject<{
            required: z.ZodBoolean;
            hardhatEtherscanAlias: z.ZodOptional<z.ZodString>;
        }, z.core.$strip>;
        url: z.ZodURL;
    }, z.core.$strip>>;
    browserUrl: z.ZodURL;
}, z.core.$strip>;
export declare const chainProviderSchema: z.ZodObject<{
    alias: z.ZodString;
    homepageUrl: z.ZodOptional<z.ZodURL>;
    rpcUrl: z.ZodOptional<z.ZodURL>;
}, z.core.$strip>;
export declare const chainProvidersSchema: z.ZodArray<z.ZodObject<{
    alias: z.ZodString;
    homepageUrl: z.ZodOptional<z.ZodURL>;
    rpcUrl: z.ZodOptional<z.ZodURL>;
}, z.core.$strip>>;
export declare const hardhatConfigOverrides: z.ZodObject<{
    networks: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
}, z.core.$strip>;
export declare const chainSchema: z.ZodObject<{
    alias: z.ZodString;
    decimals: z.ZodNumber;
    explorer: z.ZodObject<{
        api: z.ZodOptional<z.ZodObject<{
            key: z.ZodObject<{
                required: z.ZodBoolean;
                hardhatEtherscanAlias: z.ZodOptional<z.ZodString>;
            }, z.core.$strip>;
            url: z.ZodURL;
        }, z.core.$strip>>;
        browserUrl: z.ZodURL;
    }, z.core.$strip>;
    hardhatConfigOverrides: z.ZodOptional<z.ZodObject<{
        networks: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
    }, z.core.$strip>>;
    id: z.ZodString;
    name: z.ZodString;
    providers: z.ZodArray<z.ZodObject<{
        alias: z.ZodString;
        homepageUrl: z.ZodOptional<z.ZodURL>;
        rpcUrl: z.ZodOptional<z.ZodURL>;
    }, z.core.$strip>>;
    skipProviderCheck: z.ZodOptional<z.ZodBoolean>;
    symbol: z.ZodString;
    testnet: z.ZodBoolean;
}, z.core.$strip>;
export type Chain = z.infer<typeof chainSchema>;
export type ChainExplorer = z.infer<typeof chainExplorerSchema>;
export type ChainExplorerAPI = z.infer<typeof chainExplorerAPISchema>;
export type ChainExplorerAPIKey = z.infer<typeof chainExplorerAPIKeySchema>;
export type ChainHardhatConfigOverrides = z.infer<typeof hardhatConfigOverrides>;
export type ChainProviders = z.infer<typeof chainProvidersSchema>;
export type ChainProvider = z.infer<typeof chainProviderSchema>;
export interface HardhatNetworksConfig {
    [key: string]: {
        accounts: {
            mnemonic: string;
        };
        chainId: number;
        url: string;
    };
}
export interface HardhatEtherscanCustomChain {
    network: string;
    chainId: number;
    urls: {
        apiURL: string;
        browserURL: string;
    };
}
export interface HardhatEtherscanConfig {
    apiKey: {
        [alias: string]: string;
    };
    customChains: HardhatEtherscanCustomChain[];
}
export declare const aliasSchema: z.ZodString;
export type Alias = z.infer<typeof aliasSchema>;
export declare const chainAlias: z.ZodString;
export type ChainAlias = z.infer<typeof chainAlias>;
export declare const dappSchema: z.ZodObject<{
    aliases: z.ZodRecord<z.ZodString, z.ZodObject<{
        chains: z.ZodArray<z.ZodString>;
        title: z.ZodString;
        description: z.ZodOptional<z.ZodString>;
    }, z.core.$strict>>;
    homepageUrl: z.ZodOptional<z.ZodURL>;
}, z.core.$strict>;
export type Dapp = z.infer<typeof dappSchema>;
//# sourceMappingURL=types.d.ts.map