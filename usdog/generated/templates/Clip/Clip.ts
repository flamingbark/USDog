// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Kick extends ethereum.Event {
  get params(): Kick__Params {
    return new Kick__Params(this);
  }
}

export class Kick__Params {
  _event: Kick;

  constructor(event: Kick) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get top(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tab(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get lot(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get usr(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get kpr(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get coin(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class Redo extends ethereum.Event {
  get params(): Redo__Params {
    return new Redo__Params(this);
  }
}

export class Redo__Params {
  _event: Redo;

  constructor(event: Redo) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get top(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tab(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get lot(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get usr(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get kpr(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get coin(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class Take extends ethereum.Event {
  get params(): Take__Params {
    return new Take__Params(this);
  }
}

export class Take__Params {
  _event: Take;

  constructor(event: Take) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get max(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get owe(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get tab(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get lot(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get usr(): Address {
    return this._event.parameters[6].value.toAddress();
  }
}

export class Clip__getStatusResult {
  value0: boolean;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: boolean, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getNeedsRedo(): boolean {
    return this.value0;
  }

  getPrice(): BigInt {
    return this.value1;
  }

  getLot(): BigInt {
    return this.value2;
  }

  getTab(): BigInt {
    return this.value3;
  }
}

export class Clip__salesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: Address;
  value4: BigInt;
  value5: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: Address,
    value4: BigInt,
    value5: BigInt,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }

  getPos(): BigInt {
    return this.value0;
  }

  getTab(): BigInt {
    return this.value1;
  }

  getLot(): BigInt {
    return this.value2;
  }

  getUsr(): Address {
    return this.value3;
  }

  getTic(): BigInt {
    return this.value4;
  }

  getTop(): BigInt {
    return this.value5;
  }
}

export class Clip extends ethereum.SmartContract {
  static bind(address: Address): Clip {
    return new Clip("Clip", address);
  }

  active(param0: BigInt): BigInt {
    let result = super.call("active", "active(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);

    return result[0].toBigInt();
  }

  try_active(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("active", "active(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  buf(): BigInt {
    let result = super.call("buf", "buf():(uint256)", []);

    return result[0].toBigInt();
  }

  try_buf(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("buf", "buf():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calc(): Address {
    let result = super.call("calc", "calc():(address)", []);

    return result[0].toAddress();
  }

  try_calc(): ethereum.CallResult<Address> {
    let result = super.tryCall("calc", "calc():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  chip(): BigInt {
    let result = super.call("chip", "chip():(uint64)", []);

    return result[0].toBigInt();
  }

  try_chip(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("chip", "chip():(uint64)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  chost(): BigInt {
    let result = super.call("chost", "chost():(uint256)", []);

    return result[0].toBigInt();
  }

  try_chost(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("chost", "chost():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  count(): BigInt {
    let result = super.call("count", "count():(uint256)", []);

    return result[0].toBigInt();
  }

  try_count(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("count", "count():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cusp(): BigInt {
    let result = super.call("cusp", "cusp():(uint256)", []);

    return result[0].toBigInt();
  }

  try_cusp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("cusp", "cusp():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  dog(): Address {
    let result = super.call("dog", "dog():(address)", []);

    return result[0].toAddress();
  }

  try_dog(): ethereum.CallResult<Address> {
    let result = super.tryCall("dog", "dog():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getStatus(id: BigInt): Clip__getStatusResult {
    let result = super.call(
      "getStatus",
      "getStatus(uint256):(bool,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(id)],
    );

    return new Clip__getStatusResult(
      result[0].toBoolean(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
    );
  }

  try_getStatus(id: BigInt): ethereum.CallResult<Clip__getStatusResult> {
    let result = super.tryCall(
      "getStatus",
      "getStatus(uint256):(bool,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(id)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Clip__getStatusResult(
        value[0].toBoolean(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
      ),
    );
  }

  ilk(): Bytes {
    let result = super.call("ilk", "ilk():(bytes32)", []);

    return result[0].toBytes();
  }

  try_ilk(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("ilk", "ilk():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  kick(tab: BigInt, lot: BigInt, usr: Address, kpr: Address): BigInt {
    let result = super.call(
      "kick",
      "kick(uint256,uint256,address,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tab),
        ethereum.Value.fromUnsignedBigInt(lot),
        ethereum.Value.fromAddress(usr),
        ethereum.Value.fromAddress(kpr),
      ],
    );

    return result[0].toBigInt();
  }

  try_kick(
    tab: BigInt,
    lot: BigInt,
    usr: Address,
    kpr: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "kick",
      "kick(uint256,uint256,address,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tab),
        ethereum.Value.fromUnsignedBigInt(lot),
        ethereum.Value.fromAddress(usr),
        ethereum.Value.fromAddress(kpr),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  kicks(): BigInt {
    let result = super.call("kicks", "kicks():(uint256)", []);

    return result[0].toBigInt();
  }

  try_kicks(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("kicks", "kicks():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  list(): Array<BigInt> {
    let result = super.call("list", "list():(uint256[])", []);

    return result[0].toBigIntArray();
  }

  try_list(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall("list", "list():(uint256[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  live(): BigInt {
    let result = super.call("live", "live():(uint256)", []);

    return result[0].toBigInt();
  }

  try_live(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("live", "live():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  sales(param0: BigInt): Clip__salesResult {
    let result = super.call(
      "sales",
      "sales(uint256):(uint256,uint256,uint256,address,uint96,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new Clip__salesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toAddress(),
      result[4].toBigInt(),
      result[5].toBigInt(),
    );
  }

  try_sales(param0: BigInt): ethereum.CallResult<Clip__salesResult> {
    let result = super.tryCall(
      "sales",
      "sales(uint256):(uint256,uint256,uint256,address,uint96,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Clip__salesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toAddress(),
        value[4].toBigInt(),
        value[5].toBigInt(),
      ),
    );
  }

  spotter(): Address {
    let result = super.call("spotter", "spotter():(address)", []);

    return result[0].toAddress();
  }

  try_spotter(): ethereum.CallResult<Address> {
    let result = super.tryCall("spotter", "spotter():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tail(): BigInt {
    let result = super.call("tail", "tail():(uint256)", []);

    return result[0].toBigInt();
  }

  try_tail(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("tail", "tail():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tip(): BigInt {
    let result = super.call("tip", "tip():(uint192)", []);

    return result[0].toBigInt();
  }

  try_tip(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("tip", "tip():(uint192)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  vat(): Address {
    let result = super.call("vat", "vat():(address)", []);

    return result[0].toAddress();
  }

  try_vat(): ethereum.CallResult<Address> {
    let result = super.tryCall("vat", "vat():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  vow(): Address {
    let result = super.call("vow", "vow():(address)", []);

    return result[0].toAddress();
  }

  try_vow(): ethereum.CallResult<Address> {
    let result = super.tryCall("vow", "vow():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  wards(param0: Address): BigInt {
    let result = super.call("wards", "wards(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBigInt();
  }

  try_wards(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("wards", "wards(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get vat_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get spotter_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get dog_(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get ilk_(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CageCall extends ethereum.Call {
  get inputs(): CageCall__Inputs {
    return new CageCall__Inputs(this);
  }

  get outputs(): CageCall__Outputs {
    return new CageCall__Outputs(this);
  }
}

export class CageCall__Inputs {
  _call: CageCall;

  constructor(call: CageCall) {
    this._call = call;
  }
}

export class CageCall__Outputs {
  _call: CageCall;

  constructor(call: CageCall) {
    this._call = call;
  }
}

export class CashCall extends ethereum.Call {
  get inputs(): CashCall__Inputs {
    return new CashCall__Inputs(this);
  }

  get outputs(): CashCall__Outputs {
    return new CashCall__Outputs(this);
  }
}

export class CashCall__Inputs {
  _call: CashCall;

  constructor(call: CashCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get id(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CashCall__Outputs {
  _call: CashCall;

  constructor(call: CashCall) {
    this._call = call;
  }
}

export class DenyCall extends ethereum.Call {
  get inputs(): DenyCall__Inputs {
    return new DenyCall__Inputs(this);
  }

  get outputs(): DenyCall__Outputs {
    return new DenyCall__Outputs(this);
  }
}

export class DenyCall__Inputs {
  _call: DenyCall;

  constructor(call: DenyCall) {
    this._call = call;
  }

  get usr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DenyCall__Outputs {
  _call: DenyCall;

  constructor(call: DenyCall) {
    this._call = call;
  }
}

export class FileCall extends ethereum.Call {
  get inputs(): FileCall__Inputs {
    return new FileCall__Inputs(this);
  }

  get outputs(): FileCall__Outputs {
    return new FileCall__Outputs(this);
  }
}

export class FileCall__Inputs {
  _call: FileCall;

  constructor(call: FileCall) {
    this._call = call;
  }

  get what(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get data(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class FileCall__Outputs {
  _call: FileCall;

  constructor(call: FileCall) {
    this._call = call;
  }
}

export class File1Call extends ethereum.Call {
  get inputs(): File1Call__Inputs {
    return new File1Call__Inputs(this);
  }

  get outputs(): File1Call__Outputs {
    return new File1Call__Outputs(this);
  }
}

export class File1Call__Inputs {
  _call: File1Call;

  constructor(call: File1Call) {
    this._call = call;
  }

  get what(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get data(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class File1Call__Outputs {
  _call: File1Call;

  constructor(call: File1Call) {
    this._call = call;
  }
}

export class KickCall extends ethereum.Call {
  get inputs(): KickCall__Inputs {
    return new KickCall__Inputs(this);
  }

  get outputs(): KickCall__Outputs {
    return new KickCall__Outputs(this);
  }
}

export class KickCall__Inputs {
  _call: KickCall;

  constructor(call: KickCall) {
    this._call = call;
  }

  get tab(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get lot(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get usr(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get kpr(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class KickCall__Outputs {
  _call: KickCall;

  constructor(call: KickCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RedoCall extends ethereum.Call {
  get inputs(): RedoCall__Inputs {
    return new RedoCall__Inputs(this);
  }

  get outputs(): RedoCall__Outputs {
    return new RedoCall__Outputs(this);
  }
}

export class RedoCall__Inputs {
  _call: RedoCall;

  constructor(call: RedoCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get kpr(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RedoCall__Outputs {
  _call: RedoCall;

  constructor(call: RedoCall) {
    this._call = call;
  }
}

export class RelyCall extends ethereum.Call {
  get inputs(): RelyCall__Inputs {
    return new RelyCall__Inputs(this);
  }

  get outputs(): RelyCall__Outputs {
    return new RelyCall__Outputs(this);
  }
}

export class RelyCall__Inputs {
  _call: RelyCall;

  constructor(call: RelyCall) {
    this._call = call;
  }

  get usr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RelyCall__Outputs {
  _call: RelyCall;

  constructor(call: RelyCall) {
    this._call = call;
  }
}

export class TakeCall extends ethereum.Call {
  get inputs(): TakeCall__Inputs {
    return new TakeCall__Inputs(this);
  }

  get outputs(): TakeCall__Outputs {
    return new TakeCall__Outputs(this);
  }
}

export class TakeCall__Inputs {
  _call: TakeCall;

  constructor(call: TakeCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amt(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get max(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get who(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class TakeCall__Outputs {
  _call: TakeCall;

  constructor(call: TakeCall) {
    this._call = call;
  }
}
