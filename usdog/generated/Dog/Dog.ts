// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Bark extends ethereum.Event {
  get params(): Bark__Params {
    return new Bark__Params(this);
  }
}

export class Bark__Params {
  _event: Bark;

  constructor(event: Bark) {
    this._event = event;
  }

  get ilk(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get urn(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get ink(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get art(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get due(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get clip(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class Dog__ilksResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: Address, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getClip(): Address {
    return this.value0;
  }

  getChop(): BigInt {
    return this.value1;
  }

  getHole(): BigInt {
    return this.value2;
  }

  getDirt(): BigInt {
    return this.value3;
  }
}

export class Dog extends ethereum.SmartContract {
  static bind(address: Address): Dog {
    return new Dog("Dog", address);
  }

  Dirt(): BigInt {
    let result = super.call("Dirt", "Dirt():(uint256)", []);

    return result[0].toBigInt();
  }

  try_Dirt(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("Dirt", "Dirt():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  Hole(): BigInt {
    let result = super.call("Hole", "Hole():(uint256)", []);

    return result[0].toBigInt();
  }

  try_Hole(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("Hole", "Hole():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bark(ilk: Bytes, urn: Address, kpr: Address): BigInt {
    let result = super.call("bark", "bark(bytes32,address,address):(uint256)", [
      ethereum.Value.fromFixedBytes(ilk),
      ethereum.Value.fromAddress(urn),
      ethereum.Value.fromAddress(kpr),
    ]);

    return result[0].toBigInt();
  }

  try_bark(
    ilk: Bytes,
    urn: Address,
    kpr: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "bark",
      "bark(bytes32,address,address):(uint256)",
      [
        ethereum.Value.fromFixedBytes(ilk),
        ethereum.Value.fromAddress(urn),
        ethereum.Value.fromAddress(kpr),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  chop(ilk: Bytes): BigInt {
    let result = super.call("chop", "chop(bytes32):(uint256)", [
      ethereum.Value.fromFixedBytes(ilk),
    ]);

    return result[0].toBigInt();
  }

  try_chop(ilk: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall("chop", "chop(bytes32):(uint256)", [
      ethereum.Value.fromFixedBytes(ilk),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ilks(param0: Bytes): Dog__ilksResult {
    let result = super.call(
      "ilks",
      "ilks(bytes32):(address,uint256,uint256,uint256)",
      [ethereum.Value.fromFixedBytes(param0)],
    );

    return new Dog__ilksResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
    );
  }

  try_ilks(param0: Bytes): ethereum.CallResult<Dog__ilksResult> {
    let result = super.tryCall(
      "ilks",
      "ilks(bytes32):(address,uint256,uint256,uint256)",
      [ethereum.Value.fromFixedBytes(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Dog__ilksResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
      ),
    );
  }

  live(): BigInt {
    let result = super.call("live", "live():(uint256)", []);

    return result[0].toBigInt();
  }

  try_live(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("live", "live():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  vat(): Address {
    let result = super.call("vat", "vat():(address)", []);

    return result[0].toAddress();
  }

  try_vat(): ethereum.CallResult<Address> {
    let result = super.tryCall("vat", "vat():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  vow(): Address {
    let result = super.call("vow", "vow():(address)", []);

    return result[0].toAddress();
  }

  try_vow(): ethereum.CallResult<Address> {
    let result = super.tryCall("vow", "vow():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  wards(param0: Address): BigInt {
    let result = super.call("wards", "wards(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBigInt();
  }

  try_wards(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("wards", "wards(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get vat_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BarkCall extends ethereum.Call {
  get inputs(): BarkCall__Inputs {
    return new BarkCall__Inputs(this);
  }

  get outputs(): BarkCall__Outputs {
    return new BarkCall__Outputs(this);
  }
}

export class BarkCall__Inputs {
  _call: BarkCall;

  constructor(call: BarkCall) {
    this._call = call;
  }

  get ilk(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get urn(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get kpr(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class BarkCall__Outputs {
  _call: BarkCall;

  constructor(call: BarkCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CageCall extends ethereum.Call {
  get inputs(): CageCall__Inputs {
    return new CageCall__Inputs(this);
  }

  get outputs(): CageCall__Outputs {
    return new CageCall__Outputs(this);
  }
}

export class CageCall__Inputs {
  _call: CageCall;

  constructor(call: CageCall) {
    this._call = call;
  }
}

export class CageCall__Outputs {
  _call: CageCall;

  constructor(call: CageCall) {
    this._call = call;
  }
}

export class Cage1Call extends ethereum.Call {
  get inputs(): Cage1Call__Inputs {
    return new Cage1Call__Inputs(this);
  }

  get outputs(): Cage1Call__Outputs {
    return new Cage1Call__Outputs(this);
  }
}

export class Cage1Call__Inputs {
  _call: Cage1Call;

  constructor(call: Cage1Call) {
    this._call = call;
  }

  get ilk(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class Cage1Call__Outputs {
  _call: Cage1Call;

  constructor(call: Cage1Call) {
    this._call = call;
  }
}

export class DenyCall extends ethereum.Call {
  get inputs(): DenyCall__Inputs {
    return new DenyCall__Inputs(this);
  }

  get outputs(): DenyCall__Outputs {
    return new DenyCall__Outputs(this);
  }
}

export class DenyCall__Inputs {
  _call: DenyCall;

  constructor(call: DenyCall) {
    this._call = call;
  }

  get usr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DenyCall__Outputs {
  _call: DenyCall;

  constructor(call: DenyCall) {
    this._call = call;
  }
}

export class DigsCall extends ethereum.Call {
  get inputs(): DigsCall__Inputs {
    return new DigsCall__Inputs(this);
  }

  get outputs(): DigsCall__Outputs {
    return new DigsCall__Outputs(this);
  }
}

export class DigsCall__Inputs {
  _call: DigsCall;

  constructor(call: DigsCall) {
    this._call = call;
  }

  get ilk(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get rad(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DigsCall__Outputs {
  _call: DigsCall;

  constructor(call: DigsCall) {
    this._call = call;
  }
}

export class FileCall extends ethereum.Call {
  get inputs(): FileCall__Inputs {
    return new FileCall__Inputs(this);
  }

  get outputs(): FileCall__Outputs {
    return new FileCall__Outputs(this);
  }
}

export class FileCall__Inputs {
  _call: FileCall;

  constructor(call: FileCall) {
    this._call = call;
  }

  get ilk(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get what(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get data(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class FileCall__Outputs {
  _call: FileCall;

  constructor(call: FileCall) {
    this._call = call;
  }
}

export class File1Call extends ethereum.Call {
  get inputs(): File1Call__Inputs {
    return new File1Call__Inputs(this);
  }

  get outputs(): File1Call__Outputs {
    return new File1Call__Outputs(this);
  }
}

export class File1Call__Inputs {
  _call: File1Call;

  constructor(call: File1Call) {
    this._call = call;
  }

  get what(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get data(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class File1Call__Outputs {
  _call: File1Call;

  constructor(call: File1Call) {
    this._call = call;
  }
}

export class File2Call extends ethereum.Call {
  get inputs(): File2Call__Inputs {
    return new File2Call__Inputs(this);
  }

  get outputs(): File2Call__Outputs {
    return new File2Call__Outputs(this);
  }
}

export class File2Call__Inputs {
  _call: File2Call;

  constructor(call: File2Call) {
    this._call = call;
  }

  get what(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get data(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class File2Call__Outputs {
  _call: File2Call;

  constructor(call: File2Call) {
    this._call = call;
  }
}

export class File3Call extends ethereum.Call {
  get inputs(): File3Call__Inputs {
    return new File3Call__Inputs(this);
  }

  get outputs(): File3Call__Outputs {
    return new File3Call__Outputs(this);
  }
}

export class File3Call__Inputs {
  _call: File3Call;

  constructor(call: File3Call) {
    this._call = call;
  }

  get ilk(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get what(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get clip(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class File3Call__Outputs {
  _call: File3Call;

  constructor(call: File3Call) {
    this._call = call;
  }
}

export class RelyCall extends ethereum.Call {
  get inputs(): RelyCall__Inputs {
    return new RelyCall__Inputs(this);
  }

  get outputs(): RelyCall__Outputs {
    return new RelyCall__Outputs(this);
  }
}

export class RelyCall__Inputs {
  _call: RelyCall;

  constructor(call: RelyCall) {
    this._call = call;
  }

  get usr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RelyCall__Outputs {
  _call: RelyCall;

  constructor(call: RelyCall) {
    this._call = call;
  }
}
